{"version":3,"sources":["components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","useState","state","setState","handleChange","evt","value","target","checked","name","Fragment","className","onSubmit","console","log","preventDefault","type","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f6d8ebf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n \r\nconst Todo = props => {\r\n    const [state, setState] = useState({});    \r\n    const handleChange = (evt) => {\r\n        const value = evt.target.value;\r\n          if(evt.target.checked){\r\n            setState({\r\n                ...state,\r\n                [evt.target.name]: value\r\n              });\r\n        }else{\r\n           delete state[evt.target.name];   \r\n        }\r\n      }\r\n\r\n      const dataHandler = (evt) => {\r\n          console.log(state);\r\n          evt.preventDefault()\r\n      }\r\n      \r\n      function buttonClicked(index) {  \r\n        return function() {\r\n          index.click();\r\n        }\r\n      }\r\n      \r\n      const selectallvalue = () => {\r\n        var checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\r\n        for (let i = 0; i < checkboxes.length; i++) {\r\n            \r\n            buttonClicked(checkboxes[i]);\r\n            \r\n                \r\n        }\r\n      }\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <div className=\"container\">  \r\n    <form onSubmit={dataHandler}>\r\n      \r\n    <div className=\"col-1\">\r\n    <label> Hollywood\r\n    </label>\r\n      \r\n    <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Avengers: Endgame\"\r\n          value={2020}\r\n          onChange={handleChange}\r\n        />\r\n        Avengers: Endgame\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Black Panther\"\r\n          value={2018}\r\n          onChange={handleChange}\r\n        />\r\n        Black Panther\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Dolittle\"\r\n          value={2020}\r\n          onChange={handleChange}\r\n        />\r\n        Dolittle\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Wonder Woman\"\r\n          value={2018}\r\n          onChange={handleChange}\r\n        />\r\n        Wonder Woman\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"The Matrix\"\r\n          value={2018}\r\n          onChange={handleChange}\r\n        />\r\n        The Matrix\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Forrest Gump\"\r\n          value={2018}\r\n          onChange={handleChange}\r\n        />\r\n        Forrest Gump\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Gladiator\"\r\n          value={2018}\r\n          onChange={handleChange}\r\n        />\r\n        Gladiator\r\n      </label>\r\n      </div>\r\n     \r\n      <div className=\"col-1\">\r\n    <label> Bollywood\r\n    </label>\r\n      \r\n    <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Tanhaji\"\r\n          value={2020}\r\n          onChange={handleChange}\r\n        />\r\n        Tanhaji\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"New York\"\r\n          value={2009}\r\n          onChange={handleChange}\r\n        />\r\n        New York\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Bajirao Mastani\"\r\n          value={2015}\r\n          onChange={handleChange}\r\n        />\r\n        Bajirao Mastani\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Angrezi Medium\"\r\n          value={2020}\r\n          onChange={handleChange}\r\n        />\r\n        Angrezi Medium\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Agent Vinod\"\r\n          value={2012}\r\n          onChange={handleChange}\r\n        />\r\n        Agent Vinod\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Dulhe Raja\"\r\n          value={1998}\r\n          onChange={handleChange}\r\n        />\r\n        Dulhe Raja\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Omkara\"\r\n          value={2006}\r\n          onChange={handleChange}\r\n        />\r\n        Omkara\r\n      </label>\r\n      </div>\r\n     \r\n      <div className=\"col-1\">\r\n    <label> Netflix\r\n    </label>\r\n      \r\n    <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Breaking Bad\"\r\n          value={2008}\r\n          onChange={handleChange}\r\n        />\r\n        Breaking Bad\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"The Punisher\"\r\n          value={2017}\r\n          onChange={handleChange}\r\n        />\r\n        The Punisher\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Titans\"\r\n          value={2018}\r\n          onChange={handleChange}\r\n        />\r\n        Titans\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Chhota Bheem\"\r\n          value={2008}\r\n          onChange={handleChange}\r\n        />\r\n       Chhota Bheem\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Sense8\"\r\n          value={2015}\r\n          onChange={handleChange}\r\n        />\r\n        Sense8\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Glee\"\r\n          value={2009}\r\n          onChange={handleChange}\r\n        />\r\n        Glee\r\n      </label>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"V Wars\"\r\n          value={2009}\r\n          onChange={handleChange}\r\n        />\r\n        V Wars\r\n      </label>\r\n      </div>\r\n     \r\n\r\n       \r\n    <p>Please select/deselect from the list to generate console output<input type=\"submit\" name=\"submit\"/></p>\r\n      \r\n    </form>\r\n    </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\nimport Todo from './components/Todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}